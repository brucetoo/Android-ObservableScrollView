// Generate version information to show in the sample app.
// This can be achieved more easily when we use BuildConfig in Gradle and Android Studio,
// but we also support Eclipse so we don't use BuildConfig.

project.ext.versionInfo = new Expando()
project.ext.versionInfo.srcDir = 'version'

// Get git commit hash for naming the APK file if 'git' is available
try {
    project.ext.versionInfo.build = "git rev-parse --short HEAD".execute().text.trim()
} catch (ignored) {
    project.ext.versionInfo.build = "unknown"
}
project.ext.versionInfo.releaseVersionName = project.ext.versionInfo.build

android.sourceSets.findAll { it in android.buildTypes }.each {
    it.java.srcDirs += "src/${project.ext.versionInfo.srcDir}/${it.name}/java"
}

android.buildTypes.each { buildType ->
    task "generateVersionInfo${buildType.name.capitalize()}" << {
        def packageName = android.defaultConfig.applicationId
        def dir = project.file("src/${project.ext.versionInfo.srcDir}/${buildType.name}/java/${packageName.tr('.', '/')}")
        if (dir.exists()) {
            dir.listFiles().each {
                project.delete(it)
            }
        } else {
            project.mkdir(dir)
        }
        def libraryVersion = buildType.name == 'release' ? project.ext.versionInfo.releaseVersionName : project.ext.versionInfo.build
        def className = 'VersionInfo'
        new File(dir, "${className}.java").text = """\
package ${packageName};

// DO NOT EDIT: This file is automatically generated.
public class ${className} {
    public static final String LIBRARY_VERSION = "${libraryVersion}";
    public static final String BUILD = "${project.ext.versionInfo.build}";
}
"""
    }
}

task cleanVersionInfo << {
    def dir = project.file("src/${project.ext.versionInfo.srcDir}")
    if (dir.exists()) {
        dir.listFiles().findAll { it.isDirectory() }.each {
            project.delete(it)
        }
    }
}
clean.dependsOn(tasks['cleanVersionInfo'])

afterEvaluate {
    android.applicationVariants.all {
        tasks["generate${it.name.capitalize()}Sources"].dependsOn("generateVersionInfo${it.buildType.name.capitalize()}")
    }
}
